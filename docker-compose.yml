version: '3.8'

services:
  # User Service - Authentication and user management
  user-service:
    build:
      context: ./apps/user-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Product Service - Product catalog and inventory
  product-service:
    build:
      context: ./apps/product-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Order Service - Shopping cart and order processing
  order-service:
    build:
      context: ./apps/order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3001
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - user-service
      - product-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Notification Service - Multi-channel messaging
  notification-service:
    build:
      context: ./apps/notification-service
      dockerfile: Dockerfile
    container_name: ecommerce-notification-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - USER_SERVICE_URL=http://user-service:3002
      - ORDER_SERVICE_URL=http://order-service:3003
      - PRODUCT_SERVICE_URL=http://product-service:3001
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - user-service
      - order-service
      - product-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production-like setup)
  # nginx:
  #   image: nginx:alpine
  #   container_name: ecommerce-nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - user-service
  #     - product-service
  #     - order-service
  #     - notification-service
  #   networks:
  #     - ecommerce-network
  #   restart: unless-stopped

# Custom network for service communication
networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network

# Optional: Add volumes for data persistence
volumes:
  user-data:
  product-data:
  order-data:
  notification-data:
